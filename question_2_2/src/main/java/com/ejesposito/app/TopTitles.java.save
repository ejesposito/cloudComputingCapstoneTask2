/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ejesposito.app;

import java.util.Arrays;
import java.util.Iterator;
import java.util.Map;
import java.util.HashMap;
import java.util.regex.Pattern;
import java.util.List;

import scala.Tuple2;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.Function3;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaPairReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache
import org.apache.spark.streaming.kafka.KafkaUtils;

import com.google.common.base.Optionalsadas;

/** Consumes messages from one or more topics in Kafka and does wordcount.
 *
 * Usage: JavaKafkaWordCount <zkQuorum> <group> <topics> <numThreads>
 *   <zkQuorum> is a list of one or more zookeeper servers that make quorum
 *   <group> is the name of kafka consumer group
 *   <topics> is a list of one or more kafka topics to consume from
 *   <numThreads> is the number of threads the kafka consumer should use
 *
 * To run this example:
 *   `$ bin/run-example org.apache.spark.examples.streaming.JavaKafkaWordCount zoo01,zoo02, \
 *    zoo03 my-consumer-group topic1,topic2 1`
 */

public final class TopTitles {
  private static final Pattern pattern = Pattern.compile(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)");

  private TopTitles() {
  }

  public static void main(String[] args) {
    if (args.length < 4) {
      System.err.println("Usage: JavaKafkaWordCount <zkQuorum> <group> <topics> <numThreads>");
      System.exit(1);
    }

    // Spark conf
    SparkConf sparkConf = new SparkConf().setMaster("local[2]").setAppName("JavaKafkaWordCount").set("spark.streaming.receiver.maxRate","1000");

    // Create the context with 2 seconds batch size
    JavaStreamingContext jssc = new JavaStreamingContext(sparkConf, new Duration(2000));

    // Checkpoint of the context
    jssc.checkpoint(".");

    // Receiver Input DStream conf
    int numThreads = Integer.parseInt(args[3]);
    Map<String, Integer> topicMap = new HashMap<String, Integer>();
    String[] topics = args[2].split(",");
    for (String topic: topics) {
      topicMap.put(topic, numThreads);
    }
    JavaPairReceiverInputDStream<String, String> messages = KafkaUtils.createStream(jssc, args[0], args[1], topicMap);

    // Get lines from the input stream
    JavaDStream<String> lines = messages.map(new Function<Tuple2<String, String>, String>() {
      public String call(Tuple2<String, String> tuple2) {
        return tuple2._2();
      }
    });

    // Count the number of fligths per airport
    JavaDStream<String> words = lines.flatMap(new FlatMapFunction<String, String>() {
      public Iterable<String> call(String x) {
        String[] data = pattern.split(x);
        return Arrays.asList(data[1], data[2]);
      }
    });

    // mapToPair -> reduceByKey -> updateStateByKey 
    JavaPairDStream<String, Integer> wordCounts = words.mapToPair(
      new PairFunction<String, String, Integer>() {
        public Tuple2<String, Integer> call(String s) {
          return new Tuple2<String, Integer>(s, 1);
        }
      }).reduceByKey(new Function2<Integer, Integer, Integer>() {
        public Integer call(Integer i1, Integer i2) {
          return i1 + i2;
        }
      }).updateStateByKey(new Function2<List<Integer>, Optional<Integer>, Optional<Integer>>() {
        public Optional<Integer> call(List<Integer> values, Optional<Integer> state) {
          int newSum = state.or(0);
          for (int i : values) {
            newSum += i;
          }
          return Optional.of(newSum);
        }
      });

    JavaPairDStream<Integer, String> swappedPair = wordCounts.mapToPair(
      new PairFunction<Tuple2<String, Integer>, Integer, String>() {
        public Tuple2<Integer, String> call(Tuple2<String, Integer> item) throws Exception {
          return item.swap();
        }
      });

    // transform to order
    JavaPairDStream<Integer,String> sortedStream = swappedPair.transformToPair(
        new Function<JavaPairRDD<Integer,String>, JavaPairRDD<Integer,String>>() {
          public JavaPairRDD<Integer, String> call(JavaPairRDD<Integer, String> integerStringJavaPairRDD) throws Exception {
            return integerStringJavaPairRDD.sortByKey(true).take(10);
          }
        });
    

    sortedStream.print();
    jssc.start();
    jssc.awaitTermination();
  }

  //private class TupleComparator implements Comparator<Tuple2<Integer, String>>, Serializable {
  //  public int compare(Tuple2<Integer, String> tuple1, Tuple2<Integer, String> tuple2) {
  //      return tuple1._1 < tuple2._1 ? 0 : 1;
  //  }
  //}

}
